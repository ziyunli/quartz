<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://ziyunli.github.io/quartz/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ziyunli.github.io/quartz/notes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ziyunli.github.io/quartz/notes/From-Teaching-Leadership-to-Being-a-Leader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/From-Teaching-Leadership-to-Being-a-Leader/</guid><description>Advices from Andy Rachleff (president and CEO of Wealthfront)
The market is always right. Put the gun in the other person&amp;rsquo;s hand.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/How-To-Go-From-Idea-To-Series-A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/How-To-Go-From-Idea-To-Series-A/</guid><description>Notes from watching Daniel Gross&amp;rsquo;s How To Go From Idea To Series A
Step 1: Start The Dark Age: The Idea Instead of ideas, think about problems.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/How-to-Speak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/How-to-Speak/</guid><description>Notes from watching Patrick Winston&amp;rsquo;s How To Speak by Patrick Winston. It is recommended in Ask HN: Best Talks of 2020?</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/Large-Language-Models-Application-through-Production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Large-Language-Models-Application-through-Production/</guid><description>I signed up Large Language Models: Application through Production from Databricks on edX to learn more about applications of large language models.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/Learning-Go-with-Advent-of-Code-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Learning-Go-with-Advent-of-Code-2022/</guid><description>Getting Started I used Tim Hockin&amp;rsquo;s go-build-template as the reference to start the project. There is another Standard Go Project Layout that seems totally overkill for Advent of Code, but could be useful when building a real application.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/Learning-Zig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Learning-Zig/</guid><description>Installation Zig is moving fast, so I do not recommend installing it from the package manager (e.g. Homebrew, nix, etc.) as they are usually lagged.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/macOS-notarization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/macOS-notarization/</guid><description>Sometimes you download a precompiled application that is not notarized or signed, and the first time you run the system would show a warning about the impossibility to check for malicious software.</description></item><item><title/><link>https://ziyunli.github.io/quartz/notes/Open-Ruby-Gem-in-an-Editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Open-Ruby-Gem-in-an-Editor/</guid><description>bundle open opens a gem in an editor. This is useful when you need to look into the source code of a gem that your application depends on.</description></item><item><title>__slots__ in Python</title><link>https://ziyunli.github.io/quartz/notes/__slots__-in-Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/__slots__-in-Python/</guid><description>今天在公司内部交流会上聊到了我们Python后端代码中的一个小问题：在一小段代码中，我们遍历了所有的&amp;quot;item&amp;quot;，然后选了一个ID，把每个&amp;quot;item&amp;quot;都塞进了一个dict里面。 先不论这段代码的具体功能，光从实现来说当初的设计咋一看没有太大的问题，但是现在，我们客户数据库里面动不动就能翻出上千个&amp;quot;item&amp;quot;时，这段代码带来了不小的内存开销，而我们能怎么改善这个情况呢？
首先，class是解决不了问题的：默认下，每个class都有一个内建的dict，把attribute names对应到具体的数值，再加上一些别的metadata，class占用的内存会比dict更加多。
1 2 3 4 5 6 7 8 9 class Rectangle: def __init__(self, top, bottom, left, right): self.</description></item><item><title>Data Classes in Python</title><link>https://ziyunli.github.io/quartz/notes/Data-Classes-in-Pythons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Data-Classes-in-Pythons/</guid><description>dataclass decorator is introduced since Python 3.7.
A decorated class behaves like a regular Python class, but it automatically generates several dunder methods: __init__, __eq__, and __repr__.</description></item><item><title>Deep Work</title><link>https://ziyunli.github.io/quartz/notes/Deep-Work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Deep-Work/</guid><description>Why Deep Work这本书已经听说了好久， Alex Vermeer的blog到 Tim Ferris的podcast都有推荐。 但是我迟迟都没有都没有把这本书从to-do拖到in-progress。 与其说是拖延症，倒不如说自己并没有意识到对生产力的需求。 以前的生活和工作上，自己也许更多的依赖小聪明抄捷径来完成任务，同时因为责任并不多时间很充裕，往往忽略了时间管理的重要性。 直到最近，因为工作和家庭角色上的转变，自己越来越觉得时间不够用了，才终于下定决心好好读一下这本书。
不过实际上，这本书我还是花了不少时间才断断续续在地铁上读完。 一方面是在地铁上读书效率不是很高（早上有点困，下午有点累，而且不一定有座位），另外一方面就是书中讲的Focus的问题(LOL)往往读到一半就三心两意去读别的书了。 说回书本身，其实前半部分我觉得有点无聊，在上面卡了好久最后才决定快刀斩乱麻直接略读过去。 后半部分才是真正的精华部分，包含了大量实践上的指引。 不过和任何实用性的书籍一样，阅读只是起点，更重要的是执行，所以我打算接下来结合自己工作和生活的需要，做一个更简洁的计划和指引，以便于实际的执行。
How 书中的核心概念是“人的意志力是有限的”，因此书中提出的大部分建议都围绕下面两点展开:
减少意志力的开销, 减少干扰。 Rhythmic 通过制定生活和工作中的routines，尝试把deep work变成一个简单的习惯，从而减少自己精神里的犹豫和拖延，确保自己每天投资时间在自己的项目上。这个方法对没有deadline的项目尤其重要。一些简单的habit tracker app就能满足这方面的需要，例如我在使用的 Productive.</description></item><item><title>Practical Deep Learning for Coders 2022</title><link>https://ziyunli.github.io/quartz/notes/Practical-Deep-Learning-for-Coders-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Practical-Deep-Learning-for-Coders-2022/</guid><description>2. Deployment Before you clean the data, you train the model. Why?
To find out what things are difficult to recognize in your data, and to find the things that the model can help you find data problems.</description></item><item><title>Re-rank Brave search results using goggles</title><link>https://ziyunli.github.io/quartz/notes/Re-rank-Brave-search-results-using-goggles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Re-rank-Brave-search-results-using-goggles/</guid><description>Goggles allow you to alter the ranking of Brave search by using rules and filters1.
You need to create a plain text file and host it on either GitHub or GitLab.</description></item><item><title>Stable Diffusion</title><link>https://ziyunli.github.io/quartz/notes/Stable-Diffusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Stable-Diffusion/</guid><description/></item><item><title>Teach Myself LLM</title><link>https://ziyunli.github.io/quartz/notes/Teach-Myself-LLM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/Teach-Myself-LLM/</guid><description>A tracking page for my progress in learning LLM.
Deep learning 3Blue1Brown: Neural networks fast.ai: Practical Deep Learning 1: Getting started 2: Deployment 3: Neural net foundations 4: Natural Language (NLP) Prompt engineering DLAI: ChatGPT Prompt Engineering for Developers Brex&amp;rsquo;s Prompt Engineering Guide Prompt Engineering Guide Learn Prompting Applications DLAI: Building Systems with the ChatGPT API DLAI: LangChain for LLM Application Development Diffusion DLAI: How Diffusion Models Work LLM LLM Introduction: Learn Language Models edX: Large Language Models: Application through Production</description></item><item><title>如何快速学习</title><link>https://ziyunli.github.io/quartz/notes/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0/</guid><description>加速理解的两种途径:
建立知识联系 发现/改正错误 Coverage 覆盖知识面 在深入学习某方面的知识前，你需要对其进行基本的了解。 对于课程来说，这包括了课堂授课和课本阅读。 对于自学来说，这包括了阅读相关书籍和调研。 然而大部分人的误区在于，认为这些是学习中最重要的地方。 实际上，相比起后面的两种方法，它们的时间/知识转化率是相当低的。
对于视频材料，我们可以加速观看。 对于阅读，划重点是效率很低的做法。更好的方法应该是在阅读时做零散的笔记，或者读完一个重要章节后做一小段的总结。
Practice 练习 练习时需要注意两点:
练习后尽快获得反馈 Not grinding problems。练习的意义在于加强对某知识点的认识。 Insight 前面两点的意义在于让你明白之前不懂的东西。而之后需要通过方法来推广到更general的方面，而且加深知识间的联系。</description></item><item><title>如何阅读一本书</title><link>https://ziyunli.github.io/quartz/notes/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ziyunli.github.io/quartz/notes/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</guid><description>阅读的目标包括了获取资讯、增进理解与消遣娱乐。 为了增进理解而进行的阅读, 始于不相等的理解程度,要求读者进行主动的思考以得到启发并最终增进认知。 自我发现型的学习要求读者在阅读不光满足于被动的获得资讯,而要通过思考、感受与想像等方式来提升理解力.
主动阅读的四问 整体而言，本书的主题是什么？从核心主题中又发展开了什么关键议题？ 作者的观点和声明是什么？ 这本书的观点有道理吗？ 这本书和你有什么联系？ 阅读的层次 elementary reading: 这个句子在说什么 inspectional reading: 这本书在谈什么，这本书的架构如何，这本书包含哪些部分 analytical reading: 重心在追寻理解 syntopical reading: 类似主题书籍观点的比较和辩论 基础阅读 Elementary Reading 基础阅读层次主要关注于对于文字字面意思的理解能够，评价标准为能够理解一个句子在说什么。有意义的阅读都必须始于这个层次，因此初级启蒙教育中主要围绕在建立这个层次的阅读能力。然而，这个层次的阅读能力并不能真正达到为了增进理解而阅读。</description></item></channel></rss>