{"/":{"title":"🪴 Ziyun's Backyard","content":"\n\nHowdy!\n\nI am Ziyun Li(李子雲), and I also go by Stephen. I am an electrical engineer turned software engineer, and currently working as a ~~Senior~~ **Staff Software Engineer** on  ~~Xbox One at [Microsoft](https://www.microsoft.com/)~~ ~~enterprise learning management system at [D2L](https://www.d2l.com/)~~ ~~classroom engagement software at [Top Hat](https://tophat.com/)~~ [API platform](https://docs.instacart.com/connect) at [Instacart](https://www.instacart.com/).\n\nInspired by [Derek Sivers](https://sive.rs/now), I have a [[now|now]] page that tracks what I've been focused on at the moment.\n","lastmodified":"2023-07-02T22:22:25.082969822Z","tags":[]},"/notes/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0":{"title":"如何快速学习","content":"\n加速理解的两种途径:\n\n- 建立知识联系\n- 发现/改正错误\n\n## Coverage 覆盖知识面\n\n在深入学习某方面的知识前，你需要对其进行基本的了解。\n对于课程来说，这包括了课堂授课和课本阅读。\n对于自学来说，这包括了阅读相关书籍和调研。\n然而大部分人的误区在于，认为这些是学习中最重要的地方。\n实际上，相比起后面的两种方法，它们的时间/知识转化率是相当低的。\n\n对于视频材料，我们可以加速观看。\n对于阅读，划重点是效率很低的做法。更好的方法应该是在阅读时做零散的笔记，或者读完一个重要章节后做一小段的总结。\n\n## Practice 练习\n\n练习时需要注意两点:\n\n- 练习后尽快获得反馈\n- Not grinding problems。练习的意义在于加强对某知识点的认识。\n\n## Insight\n\n前面两点的意义在于让你明白之前不懂的东西。而之后需要通过方法来推广到更general的方面，而且加深知识间的联系。\n\n### The Feynman Technique\n\n把难以理解的大知识点分为小知识点进行学习\n\n- 把需要理解的知识点或者过程写下来\n- 就像要教人一样，解释这些知识点\n\n### Intuition 直觉\n\n上一步之后，你能够向他人解释知识点，那么你还可以通过下面的方式加深自己的理解\n\n- 类比\n- 图形化\n- 简化\n\n## Reference\n\n- [Mastering Linear Algebra in 10 Days: Astounding Experiments in Ultra-Learning](http://calnewport.com/blog/2012/10/26/mastering-linear-algebra-in-10-days-astounding-experiments-in-ultra-learning/)\n- [MIT Challenge](http://www.scotthyoung.com/blog/mit-challenge/)\n","lastmodified":"2023-07-02T22:22:25.090970343Z","tags":["SelfHelp"]},"/notes/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6":{"title":"如何阅读一本书","content":"\n阅读的目标包括了获取资讯、增进理解与消遣娱乐。 为了增进理解而进行的阅读, 始于不相等的理解程度,要求读者进行主动的思考以得到启发并最终增进认知。 自我发现型的学习要求读者在阅读不光满足于被动的获得资讯,而要通过思考、感受与想像等方式来提升理解力.\n\n## 主动阅读的四问\n\n- 整体而言，本书的主题是什么？从核心主题中又发展开了什么关键议题？\n- 作者的观点和声明是什么？\n- 这本书的观点有道理吗？\n- 这本书和你有什么联系？\n\n## 阅读的层次\n\n- elementary reading: 这个句子在说什么\n- inspectional reading: 这本书在谈什么，这本书的架构如何，这本书包含哪些部分\n- analytical reading: 重心在追寻理解\n- syntopical reading: 类似主题书籍观点的比较和辩论\n\n### 基础阅读 Elementary Reading\n\n基础阅读层次主要关注于对于文字字面意思的理解能够，评价标准为能够理解一个句子在说什么。有意义的阅读都必须始于这个层次，因此初级启蒙教育中主要围绕在建立这个层次的阅读能力。然而，这个层次的阅读能力并不能真正达到为了增进理解而阅读。\n\n1. 阅读准备阶段：从出生开始，直到六七岁进入elementary school为止。这个阶段主要包括了儿童身智的准备，是否能够与其他孩子一同学习，并且能保持注意力和服从性。\n2. 看图识字：从小学开始到四年级之前，儿童开始建立基本的看图识字能力。\n3. 快速建立词汇：到四年级时，儿童应该能够有能力快速建立词汇，这个程度也被称为”fourth grade literacy”\n4. 精练和增进之前的技巧：直到初中毕业之前。\n\n### 检视阅读 Inspectional reading\n\n1. 系统性略读: 非常主动的阅读，主要的注意力在于了解作者重要的主张。具体上，可以按照下列表的顺序快速翻阅，以粗略了解一本书的内容，风格，论点和可信度。这样做的意义在于希望快速判断这本书是否对于自己有益，能够增进自己的理解力。\n\n    1. 书名页\n    2. 目录页\n    3. 索引\n    4. 出版者的介绍\n    5. 选择跟主题相关的章节阅读\n    6. 翻阅全书，寻找主要论点的踪迹\n\n2. 粗浅的阅读：从头到尾阅读一遍，不要停滞在未解明的部分。这个阶段的阅读，重要在于合理控制阅读的速度。在重要的环节，还是应该适度放缓阅读速度，以免错过作者重要的论点和讨论。然而，如果遇到不甚明了的细节，也不要过于纠缠。只要阅读完全书，读者才会对整本书的内容和观点有全面的了解。\n\n在检视阅读中，读者需要尝试回答\n\n- 这是一本怎样的书？\n- 这本书的主题是什么？\n- 作者通过怎样的架构，来发展他的观点，和陈述他对书中主题的理解？\n\n回答以上问题而形成的笔记，可以整理为此书的结构笔记。当读者决定进行下一阶段更加细致的分析阅读时，结构笔记将具有指引的作用。\n\n### 分析阅读 Analytical reading\n\n1. 归纳出书的内容\n    1. 对于书的种类和主题进行分类: 实用性 v.s. 理论性\n    2. 用几句话解释整本书的内容\n    3. 把书中的主要部分按照顺序和关联性整理出大纲\n    4. 确定作者想解决的问题\n2. 诠释一本书的内容\n    1. 诠释作者的关键字\n    2. 找出最重要的句子，把握作者的重要主旨\n    3. 了解作者的论点，并从书中找出相关的句子，重新架构出作者的主旨\n    4. 确定作者解决的问题和未解决的问题\n3. 以沟通的方式进行评论\n\n### 主题阅读 Syntopical reading\n\n前提：收集同一主题的数目，并且检视书单上所有的书\n\n1. 阅读与主题相关的章节\n2. 建立与主题相关的词汇，并以此诠释不同作者对同一主题的关键字\n3. 厘清问题\n4. 界定议题\n5. 分析讨论\n","lastmodified":"2023-07-02T22:22:25.090970343Z","tags":["SelfHelp"]},"/notes/Data-Classes-in-Pythons":{"title":"Data Classes in Python","content":"\n`dataclass` decorator is introduced since Python 3.7.\n\n A decorated class behaves like a regular Python class, but it automatically generates several dunder methods: `__init__`, `__eq__`, and `__repr__`. The auto-generated constructor method is particular helpful if you have many fields in a class (e.g. a wrapper class for JSON objects). It also introduces a new dunder method was defined for any additional processing: `__post_init__`.\n\nAlso note that each field has a type hint, which is great in terms of self-documenting.\n\nAn example from https://github.com/ErnstHaagsman/swapi/blob/master/main.py\n\n```python\n@dataclass\nclass StarWarsMovie:\n    title: str\n    episode_id: int\n    opening_crawl: str\n    director: str\n    producer: str\n    release_date: datetime\n    characters: List[str]\n    planets: List[str]\n    starships: List[str]\n    vehicles: List[str]\n    species: List[str]\n    created: datetime\n    edited: datetime\n    url: str\n    def __post_init__(self):\n        if type(self.release_date) is str:\n            self.release_date = dateutil.parser.parse(self.release_date)\n        if type(self.created) is str:\n            self.created = dateutil.parser.parse(self.created)\n        if type(self.edited) is str:\n            self.edited = dateutil.parser.parse(self.edited)","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Python"]},"/notes/Deep-Work":{"title":"Deep Work","content":"\n## Why\n\n[Deep Work](https://www.goodreads.com/book/show/25744928-deep-work)这本书已经听说了好久，[Alex Vermeer](https://alexvermeer.com/life-hacking/)的blog到[Tim Ferris的podcast](https://tim.blog/2018/02/28/how-to-secure-financial-freedom-maximize-productivity-and-protect-your-health/)都有推荐。\n但是我迟迟都没有都没有把这本书从to-do拖到in-progress。\n与其说是拖延症，倒不如说自己并没有意识到对生产力的需求。\n以前的生活和工作上，自己也许更多的依赖小聪明抄捷径来完成任务，同时因为责任并不多时间很充裕，往往忽略了时间管理的重要性。\n直到最近，因为工作和家庭角色上的转变，自己越来越觉得时间不够用了，才终于下定决心好好读一下这本书。\n\n不过实际上，这本书我还是花了不少时间才断断续续在地铁上读完。\n一方面是在地铁上读书效率不是很高（早上有点困，下午有点累，而且不一定有座位），另外一方面就是书中讲的Focus的问题(LOL)往往读到一半就三心两意去读别的书了。\n说回书本身，其实前半部分我觉得有点无聊，在上面卡了好久最后才决定快刀斩乱麻直接略读过去。\n后半部分才是真正的精华部分，包含了大量实践上的指引。\n不过和任何实用性的书籍一样，阅读只是起点，更重要的是执行，所以我打算接下来结合自己工作和生活的需要，做一个更简洁的计划和指引，以便于实际的执行。\n\n## How\n\n书中的核心概念是“人的意志力是有限的”，因此书中提出的大部分建议都围绕下面两点展开:\n\n1. 减少意志力的开销,\n2. 减少干扰。\n\n### Rhythmic\n\n通过制定生活和工作中的routines，尝试把deep work变成一个简单的习惯，从而减少自己精神里的犹豫和拖延，确保自己每天投资时间在自己的项目上。这个方法对没有deadline的项目尤其重要。一些简单的habit tracker app就能满足这方面的需要，例如我在使用的[Productive](https://itunes.apple.com/us/app/productive-habit-tracker/id983826477?mt=8).\n\n### Take breaks from Focus\n\n书中提到，与其尝试在闲散时间中建立集中精力的状态，倒不如把集中精力当作常态，而把闲散时间当作休息。这种理念与Pomodoro方法很契合，所以我打算用[Be Focused](https://itunes.apple.com/ca/app/be-focused-focus-timer/id973130201?mt=8)作为执行的工具。注意的是在Pomodoro的工作时间内，你必须确保这段时间里有足够高的工作强度。自己自定一个deadline是个很好的方法，来逼出自己最大的效率。\n\n### Schedule every minute of your work hour\n\nPomodoro方法能够提供一个low-level的保持集中力方案，但是从high-level上，你也应该做好每天(work hours)里的计划。\n这样做一方面能给自己足够的压力在每个Pomodoro session里面保持专注，另一方面能够了解自己一天能有多少工作时间，有助于自己的时间规划和效率分析。\n我在尝试用[David Seah的Emergent Task Planner](https://davidseah.com/node/the-emergent-task-planner/)作为每天行程规划的模版。\n\n### Schedule Internet usage in advance\n\n现实意义来说，不用Internet是个很难完成的任务，所以我把目标降低成减少Internet带来的干扰。\n把Email和Slack这种的工作都放在一个5到15分钟的block里面处理，减少Pomodoro session里面互联网的使用。\n[DevDocs](http://devdocs.io/)和[Dash](https://kapeli.com/dash)这样的工具能够满足大部分查阅文档的需要。\n[HN](https://news.ycombinator.com/)有毒，能不上就不上。\n坦白说我把目标降低后，因为没有了一个强硬的禁闭手段，确实更容易让自己的时间浪费上无关重要的页面上了。\n作为折中，我尝试使用[Rescue Time](https://www.rescuetime.com/)来分析自己的时间使用效率。\n现阶段我打算每周回顾一次，但是如果时间上允许的话，也许每日回顾能更有效的发现不好的效率信号然后更快地作出改变。\n\n### Project Execution\n\n在执行具体项目的时候，可以用上很多管理团队项目的概念。\n\n- 侧重在最重要的事情上\n- 建立自己的计分牌，找到自己效率的metrics，然后根据lead measures而行动。在书中提出的工作模式里，花了多少时间在deep work session是一个不错的关注点\n- 回顾自己的计分牌，不停挑战自己的极限\n\n### Quit Social Media\n\n回顾自己使用的社交网络工具，评价每一个对自己的重要性，然后放弃对自己并不重要的那些。\n同时，不要使用互联网来娱乐自己。安排自己每晚的时间，尝试建立自己的兴趣爱好(structured hobbies)，为自己打发时间的方式找到目标并以此行动。\n\n### Drain the Shallows\n\n问问自己，你现在手头中的工作如果要交给一个没有相关背景的聪明大学毕业生，他需要多久的训练才能完成这样的工作？\n\n找到能够增长自己价值的deep work，减少自己在shallow work上面花的时间和精力。\n\n### Work-life balance\n\n在下午5:30时结束工作，并通过这个hard deadline在逼使自己在工作时间内达到高效率。\n不要尝试回复每一封邮件，让发信人做更多的功课来说服你来回复。\n同时，在自己的回复花费更多的功夫，目标是更有效率地推动手上的项目进行，而不是进入没有意义的扯皮中。\n回答书中提到的三个问题，能够更好的归纳自己的思路。\n\n\u003e What is the project represented by this message, and what is the most efficient (in terms of messages generated) process for bringing this project to a successful conclusion?\n\n## To Do\n\n在年中时再对上面的方法进行一次回顾复习，看看哪些方法有效，哪些方法并不适合我，然后我应该怎么对自己的方法进行改善。\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["SelfHelp"]},"/notes/From-Teaching-Leadership-to-Being-a-Leader":{"title":"From Teaching Leadership to Being a Leader","content":"\nAdvices from Andy Rachleff (president and CEO of Wealthfront)\n\n- The market is always right.\n- Put the gun in the other person's hand.\n- Create a fear of loss.\n\n摘自[a16z Podcast: From Teaching Leadership to Being a Leader](https://soundcloud.com/a16z/rachleff-coates-breakline-vets).\n\n## The market is always right; it's much important than your idea\n\n[3:38]\n“狗狗不吃我家的狗粮，一定是这狗狗有问题。”\n企业家往往对自己的idea过于自信，认为自己的产品没有成功只是用户的问题，而没有倾听用户的反馈。\n这样的做法，很难带来成功。而相对的，成功的企业往往都不是因为它们最初的idea。\n企业家更需要做的是，找出愿意使用你的产品的用户，并想办法为他们创造更多的价值。\n当你的产品真正解决了用户最迫切的需求时，才能吸引到更多用户。\n\n## The \"Golden Rule\"\n\n[11:49]\n\"Do to others what you want them to do to you.\"\n这是生活上常用的一个准则，也可以推广到谈判上。\n\"Put the gun in the other person’s hand.\"\n你把主动权交给对方，然后观察对方给你的开价。\n如果对方给你开了一个荒唐的高价，你可以知道他的为人，然后避免再与他合作。\n如果对方给你开了一个诚实的价格，你可能收获了一个值得信任的合作伙伴，而且避免了很多谈判的烦恼。\n\n## Fear of Loss\n\n[13:38]\n损失带来的痛苦远大于获得带来的喜悦。\n大多人并不是因为机会而行动，而更多是因为害怕错过。\n如果你不能创造出“fear of loss”，那么你将很难close a deal。\n作为卖家，你必须创造出“现在不买就没机会了”的错觉。\n\n## 如何面对竞争\n\n很多企业家担心自己的idea被抄袭。\n然而实际上，并不会（有很多人）看到你获得成功，就放下自己手上的事情而去和你做一样的事情\n\n## 关于产品\n\n了解你的核心用户，针对他们来设计产品。\n与其尝试去做一个完美的产品，不如去做一个对你的核心用户而言完美的产品。\n你没有办法，也不应该尝试让所有人都满意。\n\nBuild love. Solve burning needs.\n如果你可以给70%的用户做到这样，那即使这意味着激怒剩下的30%用户，也是值得的。\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Leadership"]},"/notes/How-To-Go-From-Idea-To-Series-A":{"title":"How To Go From Idea To Series A","content":"\nNotes from watching Daniel Gross's [How To Go From Idea To Series A](https://www.youtube.com/watch?v=kXFzRdzKMMI)\n\n## Step 1: Start\n\n### The Dark Age: The Idea\n- Instead of ideas, think about **problems**.\n\t- Challenge: You tend to focus on what you experience\n\t\t- Optimize your anecdotal environment to find *interesting* ideas\n\t- Note what ideas keep on coming back\n\t- Find the frontier.\n\t- Small ideas are best.\n\t- Examine your market.\n\t- Environment is everything.\n\n### The Feudal Age: Advancing\n- Product-Market Fit (Growth)\n\t- Polish, polish, polish\n\t- Talk to your users: **personality changes required**\n\t- Metrics are your map to success\n\t\t- Revenue\n\t\t- Usage\n\t\t- Derivative\n\t- Consistency\n\t- A *system* that will propel you to your best self.\n\n### Castle Age: 800 Gold Required == Fundraising\n- Stand-out\n\t- Brand\n\t- Metrics\n\t- (Cold) Intro\n\t\t- What you do, in a way a stranger would understand.\n\t\t- What's different or new about you.\n\t\t- Why your market is interesting.\n\t\t- Is maximally compressed.\n- The Deck\n\t- Title slide\n\t- What you're building\n\t- What problem this is solving\n\t- What's new or different about you\n\t- Why your market is interesting\n\t- Who you are\n- Push to meet in person\n\t- A/B test\n- Focus on iteration speed\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Startup"]},"/notes/How-to-Speak":{"title":"How to Speak","content":"\nNotes from watching Patrick Winston's [How To Speak by Patrick Winston](https://www.youtube.com/watch?v=Unzc731iCUY).\nIt is recommended in [Ask HN: Best Talks of 2020?](https://news.ycombinator.com/item?id=25537230).\nIt's wonderful. While it is heavily oriented towards academia, I believe the principles are universal enough to be applied to elsewhere. Here are my main takeaways.\n\n## How to Start\n\nFirst of all, if you want to acknowledge collaborators for you projects, you should do it in the first slide. Do not end your talk with this.\nThen, you can start with an empowerment promise and set up the expectation of the audience.\nIt's also a good idea to explain how cool is the stuff, if your talk is to inform.\n\n## Heuristics for delivering the content\n\nThere are several samples to make your talk more interesting/engaging.\n\nYou should cycle on the subject, so that the audience can follow along a bit easier.\nAdding verbal punctuation is also a good idea to pace your talk. You can go through the outline at the middle of the talk, enumerate the topics you've gone through, and re-iterate how the talk has developed to. This gives the audience some breathing room to digest your talk, and provides a seam that connects all the dots.\n\nI am not sure how to interpret \"building fence around your ideas\" in a non-academic talk.\nI guess you can compare with similar projects or alternatives, and try to draw a separating lines between them.\n\nAsking a question can be a useful technique, but make sure the question is either too easy or too hard.\n\n## Tools/Time/Place\n\nIt's recommended to have your talk around 11AM in a well-lit room that ideally should be 50% occupied during your talk.\nHowever, it's usually not easy to have full control on these factors so I'd say try your best.\n\nIf possible, writing on a board is better than presenting slides via a laptop.\nA board has several useful attributes such as easy to draw graphics, appropriate speed for audience to follow, and serves as a target for your hands.\nIt also avoids many pitfalls for using a slide.\n\nIf you need to use slides, follow these guidelines:\n- Do not read\n- Be in the image\n- Keep images simple\n- Eliminate clutter\n\nYou can have a hapax legomenon once in a presentation.\n\n## Persuading\n\nAgain, this is heavily oriented toward job talks in academia.\nI think the takeaway for me is that you show aim to present yourself within 5 minutes, with your vision and contributions.\nFor vision, describe the problem you're trying to solve and your approach.\n\nThe concept of Winston'star is quite interesting - when describing your contributions you should include the following:\n- Symbol\n- Slogan\n- Surprise\n- Salient\n- Story\n\nAs for why you should spend some time to practice this...\n\n\u003e You get used to being famous, but you never get used to being ignored.\n\n## How to stop\n\nAt the last slide, highlights your contributions.\n\nEnd your talk with a joke if possible.\n\n\u003e I always finish with a joke, and that way people think they've had fun the whole time\n\nDo not say thank you at the end. Instead, salute the audience.\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["SelfHelp"]},"/notes/Large-Language-Models-Application-through-Production":{"title":"Large Language Models Application through Production","content":"\nI signed up [Large Language Models: Application through Production](https://learning.edx.org/course/course-v1:Databricks+LLM101x+2T2023/home) from Databricks on edX to learn more about applications of large language models. This page contains my notes on the course.\n\n## Introduction\n\nThis module goes through some key concepts and terminology.\n\n- Language models: probabilistic models that assign probabilities to word sequences.\n- Large: from 10~50M to many billions of parameters. Made possible by transformer architecture since ~2017.\n\nPrimitives:\n- Token: basic building block of language models. Words, sub-words, characters, etc.\n- Sentence: sequence of tokens.\n- Vocabulary: complete list of tokens.\n\nTokenization:\n1. Words:\n   1. Intuitive\n   2. Big vocabulary\n   3. Complications such as misspelling, out-of-vocabulary (OOV) words, etc.\n2. Characters:\n   1. Small vocabulary\n   2. No OOV\n   3. Long sequences\n   4. No word-level semantics\n3. Subwords:\n  1. popular: byte pair encoding (BPE)\n\nWord embeddings:\n1. By frequency -\u003e sparsity issue\n2. word/token -\u003e embedding function -\u003e word embedding/vector\n\n## Application\n\nThis module is in fact an introduction of huggingface transformers. The code examples are very straightforward to understand if you already know Python.\nIn fact the whole lab takes around 10 minutes to complete if it's not waiting to download all the data sets and models along the way.\n\nOn the high level, a HF pipeline could have these steps:\ninput -\u003e prompt constructions -\u003e tokenizer (encoding) -\u003e model -\u003e tokenizer (decoding) -\u003e output\n\nSome parameters to tweak:\n\ntokenizer:\n- `max_length`: max length of input sequence\n\nmodel:\n- `do_sample`: whether to use sampling\n  - `top_k`: top k tokens to sample from\n  - `top_p`: cumulative probability of top tokens to sample from\n  - `termperture`: temperature of sampling\n- `num_beams`: number of beams for beam search\n- `max_length`: max length of output sequence\n- `min_length`: min length of output sequence","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["LargeLanguageModel"]},"/notes/Learning-Go-with-Advent-of-Code-2022":{"title":"Learning Go with Advent of Code 2022","content":"\n## Getting Started\n\nI used Tim Hockin's [go-build-template](https://github.com/thockin/go-build-template) as the reference to start the project. There is another [Standard Go Project Layout](https://github.com/golang-standards/project-layout) that seems totally overkill for Advent of Code, but could be useful when building a real application. Below is how the project looks.\n\n```bash\n% exa -T                                                                                                                                                                                                                                                               (main)\n.\n├── cmd\n│  └── cli\n│     └── main.go\n├── input\n│  └── 2022\n│     ├── day01.txt\n│     └── day02.txt\n├── internal\n│  └── year2022\n│     ├── day1.go\n│     ├── day2.go\n│     └── year2022.go\n├── go.mod\n├── go.sum\n├── LICENSE\n└── README.md\n```\n\nI don't expect anyone to import anything from this repo. Therefore I put the solutions inside `internal`, which has special handling for Go projects ([more details on `internal packages`](https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit)).\n\nI also build a small CLI tool to run the solutions. Building CLI application is straightforward with the [`flag` package](https://pkg.go.dev/flag). I decided to read the input from STDIN by default. This can be done by using `bufio.Scanner`[^1]. This helps to test the solutions with the smaller example inputs, as below. Note that on macOS, you need to type `Ctrl+D` to signify the end of the input[^2].\n\n```shell\n% go run ./cmd/cli -year 2022 -day 1 -part 1\nYear: 2022, Day: 1, Part: 1\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nTop most calories: [24000]\n```\n\nIt's also possible to pipe the input to STDIN, which is what I do when running the full input. For example:\n```shell\ncat input/2022/day02.txt | go run ./cmd/cli -year 2022 -day 2 -part 2\n```\n\n## Go Basics\n\n[Go by Example](https://gobyexample.com/) is a very useful reference.\n\n### Operators\n\nIn Go, `%` computes the \"remainder\" as opposed to the \"modulus\"[^5]. Therefore, unlike other languages like Python, `%` can return negative numbers in Go. Below is a branchless implementation of Python's `%` operator.\n\n```go\nfunc mod(a, b int) int {\n    return (a % b + b) % b\n}\n```\n\n### Slices\n\n### Sorting\n\nComing from Python and Ruby, sorting in Go requires several more steps and feels slightly cumbersome. There is [sort.Ints](http://golang.org/pkg/sort/#Ints) to sorts a slice of `int`s, but only in increasing order. Generally, you need to implement the [sort.Interface](http://golang.org/pkg/sort/#Interface) interface if you want to sort something and [sort.Reverse](http://golang.org/pkg/sort/#Reverse) just returns a different implementation of that interface that redefines the `Less` method[^3]. At the end, the following does the reverse, but I am still wrapping my head around it.\n\n```go\nsort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n```\n\n### Concatenation\n\nThis is much easier because `append` is a variadic function, therefore you can just do it with three-dots[^6]:\n\n```go\nappend([]int{1,2}, []int{3,4}...)\n```\n\n### Strings\n\nIn AoC, the input comes from an input file, and it's common to manipulate each line for the tasks. The [`strings` package](https://pkg.go.dev/strings) has plenty of useful methods to handle strings.\n\nStrings are constructed by *runes*, identified by single-quotes, e.g. `'a'`. To convert a slice of runes to a string, you can simply use `string`, e,g,\n\n```go\ns := string([]rune{ 'a', 'b', 'c' })\n```\n\n#### Regexp\n\nPackage [`regexp`](https://pkg.go.dev/regexp) implements regular expression search. It's based on RE2 syntax[^7]. Example for matching with capturing groups:\n\n```go\nr, _ := regexp.Compile(`move ([\\d]+) from ([\\d]+) to ([\\d]+)`)\nmatches := r.FindStringSubmatch(line)\nlog.Printf(\"move %v from %v to %v\", matches[1], matches[2], matches[3])\n```\n\n### Enum\n\nThere is real enums in Go, and looks like people work around it by using constants and type definition. Below is an example:\n```go\ntype Color int\n\nconst (\n\tRed Color = iota\n\tOrange\n\tYellow\n\tGreen\n\tBlue\n\tIndigo\n\tViolet\n)\n```\n\nIt also uses the *constant generator* `iota`. In a `const` declaration, the value of `iota` begins at zero and increments by one for each item in the sequence[^4]. You can also use `iota` in more complex expressions, e.g. building bit masks.\n\nIt seems like you can also use the [`stringer`](https://pkg.go.dev/golang.org/x/tools/cmd/stringer)  package to generate `String()` methods for your enum type. But I haven't figured out how to use it yet.\n\n[^1]: https://stackoverflow.com/questions/20895552/how-can-i-read-from-standard-input-in-the-console \"How can I read from standard input in the console?\"\n[^2]: https://unix.stackexchange.com/questions/16333/how-to-signal-the-end-of-stdin-input \"How to signal the end of stdin input(\"\n[^3]: https://stackoverflow.com/questions/18343208/how-do-i-reverse-sort-a-slice-of-integer-go \"How do I reverse sort a slice of integer Go?\"\n[^4]: https://www.gopl.io/ \"The Go Programming Language\"\n[^5]: https://github.com/golang/go/issues/448#issuecomment-66049769 \"Modulus returns negative numbers\"\n[^6]: https://stackoverflow.com/questions/16248241/concatenate-two-slices-in-go \"Concatenate two slices in Go\"\n[^7]: https://golang.org/s/re2syntax \"RE2 Syntax\"","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Go"]},"/notes/Learning-Zig":{"title":"Learning Zig","content":"\n## Installation\n\nZig is moving fast, so I do not recommend installing it from the package manager (e.g. Homebrew, nix, etc.) as they are usually lagged.\nInstead, follow what [zigleanr](https://ziglearn.org/#installation) suggests, download the latest master build from https://ziglang.org/download/ and put it in your `$PATH`.\nNote that you want to put the entire directory in your `$PATH` instead of the binary itself; otherwise you will get an error like this:\n\n```\nerror: unable to find zig installation directory '/usr/local/bin/zig': FileNotFound\n```\n\n## Getting Started\n\n[ziglings](https://github.com/ziyunli/ziglings)\n\n## Built-in\n\nThe `@import()` function is built into Zig.\nIt returns a value which represents the imported code.\n\n```zig\nconst std = @import(\"std\");\n```\n\n## Types\n\n### Arrays\n\n*Is it allocated on the heap?*\n\nInitialization with `[n]type{ ... }`\n\n```zig\nvar foo = [_]u32{ 42, 108, 5423 };\n```\n\nConcatenate with `++`\n\n```zig\nvar foo = [_]u32{ 42, 108, 5423 } ++ [_]u32{ 42, 108, 5423 };\n```\n\nRepeat with `**`\n\n```zig\nvar foo = [_]u32{ 42, 108, 5423 } ** 2;\n```\n\n### Strings\n\nStrings use double quotes. Zig stores strings as arrays of bytes.\n\n```zig\nvar foo = \"Hello, world!\";\n```\n\nMulti-line string literals are supported with leading `\\\\` at the beginning of each line.\n\n```zig\nconst foo =\n  \\\\Hello,\n  \\\\world!\n```\n\n### Enums\n\n```zig\nconst Fruit = enum{ apple, pear, orange };\n```\n\n### Structs\n\n### Pointers\n\n\n\n## Conditions\n\n### If\n\n* If only takes boolean condition\n* If statements are valid expressions\n\n### While\n\nContinue expression is optional.\n\n```zig\nwhile (condition) : (continue expression) {\n  // ...\n}\n```\n\n`continue` and `break` are supported in while loops.\n\n### For\n\n`for` works like iterators on arrays and slices.\n\n```zig\nfor (items) |item, index| {\n  // ...\n}\n```\n\n### Switch\n\n`switch` works like `match` expression in other languages.\nSwitch statements must be \"exhaustive\".\nThey are also valid expressions.\n\n```zig\nswitch (players) {\n  1 =\u003e print(\"1 player\", .{}),\n  2 =\u003e print(\"2 players\", .{}),\n  else =\u003e print(\"{} players\", .{ players })\n}\n```\n\n`unreachable` is a special value that can be used to indicate that a switch statement is exhaustive.\n\n\n## Functions\n\nZig functions are private by default but the `main()` function should be public.\nA function is declared public with the `pub` statement.\n\n### Defer\n\n`defer` is a statement that executes a function when the current scope is exited.\n`errdefer` is a statement that executes a function when the current scope is exited with an error.\n\n\n## Errors\n\nErrors are created in \"error sets\", which works like an enum.\n\n```zig\nconst Error = error{ Foo, Bar };\n```\n\nZig support \"error unions\", which could be either a regular value OR an error from a set.\n\n```zig\nvar text: MyErrorSet!Text = ...;\n```\n\n`!void` will let Zig to infer the error type, which is useful for `main()`.\n\n### Error handling\n\n`catch` catches an error and replace it with a default value.\n\n```zig\nfoo = canFail() catch \"bar\"\n```\n\n`catch` can also capture the error and perform additional actions.\n\n```zig\nfoo = canFail() catch |err| {\n  if (err == FishError.TunaMalfunction) {\n    ...\n  }\n}\n```\n\n`try` is a shorthand for `catch` to return the error.\n\n```zig\ncanFail() catch |err| return err;\n\n// is equivalent to\n\ntry canFail();\n```\n\n`if` can be used to check if an error is present.\n\n```zig\nif (canFail()) |value| {\n  // ...\n} else |err| switch {\n  FishError.TunaMalfunction =\u003e ...,\n  else =\u003e ...,\n}\n```\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Zig"]},"/notes/Open-Ruby-Gem-in-an-Editor":{"title":"Open Ruby Gem in an Editor","content":"\n[bundle open](https://bundler.io/man/bundle-open.1.html) opens a gem in an editor. This is useful when you need to look into the source code of a gem that your application depends on.\n\nThe documentation above says that\n\n\u003e For this to work the `EDITOR` or `BUNDLER_EDITOR` environment variable has to be set.\n\nThis means this is likely to open up a VIM-variant editor for you. However, if you set `VISUAL` in your environment, the command will use that instead. For example, to open in Visual Studio Code, you can push the following in your `rc` file.\n\n```\nexport VISUAL='code'\n```\n\n[Here](https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference) has more discussions between `VISUAL` and `EDITOR` environment variables.\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Ruby"]},"/notes/Practical-Deep-Learning-for-Coders-2022":{"title":"Practical Deep Learning for Coders 2022","content":"\n# 2. Deployment\n\nBefore you clean the data, you train the model. Why?\n\n\u003e To find out what things are difficult to recognize in your data, and to find the things that the model can help you find data problems.\n\nLook at\n- confusion matrix\n- top losses `plot_top_losses`\n  - images that the model is most confident about but wrong, or\n  - images that the model is the least confident about but right\n\nThen use `ImageClassifierCleaner` to clean the data.\n\nTerms:\n- Data augmentation:\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["DeepLearning"]},"/notes/Re-rank-Brave-search-results-using-goggles":{"title":"Re-rank Brave search results using goggles","content":"\nGoggles allow you to alter the ranking of Brave search by using rules and filters[^1].\n\nYou need to create a plain text file and host it on either GitHub or GitLab. Brave only keeps a reference of the original Goggle file when provided with a link to the original source. If you make it public, it becomes searchable[^2].\n\nI quickly created my [own](https://github.com/ziyunli/goggles/blob/main/snr.goggle) in  \u003c5 mins, and it works like a charm 🥳\n\n![image.png](notes/images/screenshot.png)\n\n[^1]: https://github.com/brave/goggles-quickstart/blob/main/getting-started.md#getting-started \"Googles Getting Started\"\n[^2]: https://search.brave.com/goggles/discover \"Discover Goggles\"\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":[]},"/notes/Stable-Diffusion":{"title":"Stable Diffusion","content":"\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["DiffusionModel"]},"/notes/Teach-Myself-LLM":{"title":"Teach Myself LLM","content":"\nA tracking page for my progress in learning LLM.\n\n## Deep learning\n* [x] [3Blue1Brown: Neural networks](https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi)\n- [ ] [fast.ai: Practical Deep Learning](https://course.fast.ai/)\n  - [x] [1: Getting started](https://course.fast.ai/Lessons/lesson1.html)\n  - [x] [2: Deployment](https://course.fast.ai/Lessons/lesson2.html)\n  - [x] [3: Neural net foundations](https://course.fast.ai/Lessons/lesson3.html)\n  - [ ] [4: Natural Language (NLP)](https://course.fast.ai/Lessons/lesson4.html)\n\n## Prompt engineering\n- [x] [DLAI: ChatGPT Prompt Engineering for Developers](https://learn.deeplearning.ai/chatgpt-prompt-eng)\n- [x] [Brex's Prompt Engineering Guide](https://github.com/brexhq/prompt-engineering/blob/main/README.md)\n- [ ] [Prompt Engineering Guide](https://www.promptingguide.ai/)\n- [ ] [Learn Prompting](https://learnprompting.org/)\n\n## Applications\n- [ ] [DLAI: Building Systems with the ChatGPT API](https://learn.deeplearning.ai/chatgpt-building-system)\n- [ ] [DLAI: LangChain for LLM Application Development](https://learn.deeplearning.ai/langchain)\n\n## Diffusion\n- [ ] [DLAI: How Diffusion Models Work](https://learn.deeplearning.ai/diffusion-models)\n\n## LLM\n- [ ] [LLM Introduction: Learn Language Models](https://gist.github.com/rain-1/eebd5e5eb2784feecf450324e3341c8d)\n- [ ] [edX: Large Language Models: Application through Production](https://learning.edx.org/course/course-v1:Databricks+LLM101x+2T2023/home)\n","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["LargeLanguageModel"]},"/notes/__slots__-in-Python":{"title":"__slots__ in Python","content":"\n今天在公司内部交流会上聊到了我们Python后端代码中的一个小问题：在一小段代码中，我们遍历了所有的\"item\"，然后选了一个ID，把每个\"item\"都塞进了一个dict里面。\n先不论这段代码的具体功能，光从实现来说当初的设计咋一看没有太大的问题，但是现在，我们客户数据库里面动不动就能翻出上千个\"item\"时，这段代码带来了不小的内存开销，而我们能怎么改善这个情况呢？\n\n\n首先，class是解决不了问题的：默认下，每个class都有一个内建的dict，把attribute names对应到具体的数值，再加上一些别的metadata，class占用的内存会比dict更加多。\n\n```python\nclass Rectangle:\n    def __init__(self, top, bottom, left, right):\n      self.top = top\n      self.bottom = bottom\n      self.left = left\n      self.right = right\n\nr = Rectangle(1, 2, 3, 4)\nprint(r.__dict__)\n```\n\n`collections.namedtuple`是大部分人的第一反应，然而和tuple一样，namedtuple的attributes是immutable的。\n这个差异会给codebase带来不小的改动，而我们都认为这不是一个合适的时间投资。\n\n```python\nimport collections\nRectangle = collections.namedtuple('Rectangle', ['top', 'bottom', 'left', 'right'])\nr = Rectangle(1, 2, 3, 4) # AttributeError: can't set attribute\n```\n\n在我们的代码里面，所有的attributes都是已知的，数量不多，而且我们的代码并没有增减attributes，所以我们最后用了`__slots__`这个方案。\n在class内声明`__slots__`后，该类将不会自动生成`__dict__`。\n我们也能对已知的attributes重新赋值。\n需要注意的是，为了使用`__slots__`，我们必须让`Rectangle`继承`object`。\n任何`Rectangle`的派生类都必须重新声明`__slots__`，否则派生类还是会内建`__dict__`。\n\n```python\nclass Rectangle(object):\n    __slots__ = ('top','bottom','left', 'right')\n    def __init__(self, top, bottom, left, right):\n      self.top = top\n      self.bottom = bottom\n      self.left = left\n      self.right = right\n\nr = Rectangle(1, 2, 3, 4)\nprint(r.__dict__) # AttributeError: 'Rectangle' object has no attribute '__dict__'\nprint(r.__slots__) # ('top', 'bottom', 'left', 'right')\nprint(r.top) # = 1\nr.top = 3\n```\n\n上面的方案存在的最后一个问题是：原代码块内使用的是dict的接口，而我们的类并不兼容这些接口(JS大法好)。\n所以我们还必须继承`MutableMapping`，并且实现其所需的方法。\n这样的话，我们就可以在基本不改动原代码块的情况下，达到我们减少内存使用的目的。\n\n```python\nclass Rectangle(MutableMapping):\n    __slots__ = ('top','bottom','left', 'right')\n    def __init__(self, top, bottom, left, right):\n      self.top = top\n      self.bottom = bottom\n      self.left = left\n      self.right = right\n\n    # implements MutableMapping\n    ...\n```\n\n说回来，在Python里面获取instances所占用的内存的方法并不是很trivial，等我多做一些研究后再写一篇归纳。","lastmodified":"2023-07-02T22:22:25.086970082Z","tags":["Python"]},"/notes/macOS-notarization":{"title":"macOS notarization","content":"\n\nSometimes you download a precompiled application that is not notarized or signed, and the first time you run the system would show a warning about the impossibility to check for malicious software. This is since macOS 10.15 “Catalina” when Apple introduced new notarization requirements [^1].\n\nTo fix, you can launch the app by right click (or CTRL click) on the app icon and choose the open action [^2].\n\nAlternatively, run the following command from the terminal:\n\n```shell\nxattr -r -d com.apple.quarantine \"FULL PATH OF app\"\n```\n\nDo make sure the application is safe to run!\n\n[^1]: https://firefox-source-docs.mozilla.org/testing/geckodriver/Notarization.html \"macOS notarization\"\n[^2]: https://github.com/sbarex/QLMarkdown\n","lastmodified":"2023-07-02T22:22:25.090970343Z","tags":[]},"/now":{"title":"now","content":"\n- Ramping up on DL/AIGC\n\t- [ ] Taking [[notes/Large Language Models Application through Production|Large Language Models: Application through Production]]\n\t- Playing with [[notes/Stable Diffusion|Stable Diffusion]]","lastmodified":"2023-07-02T22:22:25.090970343Z","tags":[]}}